{"/config/app":{"title":"应用配置详情","data":{"":"","entry#entry":"object | string | string[]可用于修改、拓展 Webpack 的 enrty 选项，配置项参考 官方文档。\nmodule.exports = {\n// ...\nentry: {\nhome: './home.js',\nabout: ['./about.js'],\ncontact: ['./contact.js']\n}\n}"}},"/config/lib":{"title":"库配置详情","data":{"":"","entry#entry":"string | string[]可用于修改、拓展 Rollup 的 input 选项。\nexport default {\n// ...\nentry: 'src/index.ts'\n}"}},"/document/introduction/characteristic":{"title":"特性","data":{"":"基于 Koa 开发, 底层框架性能优异。\n基于 Typescript 进行项目开发，更安全，更高效。\n基于 routing-controllers 进行路由的定义，完善的注解API，开发效率更高\n提供基于 Yunfly 强大的插件能力\n高度扩展的框架开发机制\n内置多进程能力\n渐进式开发"}},"/document/introduction/framework-differences":{"title":"与社区框架差异","data":{"":"能力\tyunfly\teggjs\tnestjs\tTypescript\t✅\t❌[支持但不友好]\t✅\tcluster\t✅\t✅\t❌\topenapi\t✅\t❌\t✅\t框架约束\t部分约束\t约束\t自由\t扩展模型\t插件\t插件\t模块"}},"/document/introduction/introduce":{"title":"介绍","data":{"":"Yunfly 一款高性能 Node.js WEB 框架, 使用 Typescript 构建我们的应用。\n使用 Koa2 做为 HTTP 底层框架, 使用 routing-controllers 、 typedi 来高效构建我们的 Node 应用。Yunfly 在 Koa 框架之上提升了一个抽象级别, 但仍然支持 Koa 中间件。在此基础之上, 提供了一套强大的插件系统, 给开发者提供更强大更灵活的能力。","框架技术栈#框架技术栈":"Koa2 node.js http 框架, async await异步编程 参考文档\nfind-my-way 一款高性能的 http 路由器 参考文档\ntypescript 微软开发的自由和开源的编程语言, 它是JavaScript的一个超集, 添加了可选的静态类型和基于类的面向对象编程 参考文档\nrouting-controllers  使用装饰器的方式来进行路由的开发 参考文档\ntypedi: 依赖注入插件工具  参考文档\ngrpc: 一个高性能、开源和通用的 RPC 框架  参考文档\nlog4js: javascript 的 log 日志插件 参考文档"}},"/document/introduction/performance":{"title":"性能","data":{"":"以下性能测试为同一台机器同样的容器场景下压测3分钟得出的结果。","容器环境#容器环境":"1G1核 Docker 容器","hello-world-场景#hello world 场景":"web框架\tqps\t备注\tyunfly\t6400\t使用 koa 为底层库\teggjs\t3950\t使用 koa 为底层库\tnestjs\t2900\t使用 express 为底层库\tnestjs\t7200\t使用 fastify 为底层库","1000-个路由场景#1000 个路由场景":"web框架\tqps\t备注\tyunfly\t6100\t使用 koa 为底层库\teggjs\t1680\t使用 koa 为底层库\tnestjs\t2050\t使用 express为底层库\tnestjs\t6550\t使用 fastify为底层库"}},"/document/simple-use/env":{"title":"环境准备","data":{"":"","nodejs-版本#Node.js 版本":"Node.js >= 12.17.0, 推荐使用 node@14+","环境变量#环境变量":"NODE_ENV\tRUNTIME_ENV\t说明\tdev\tlocal\t本地开发环境\tproduction\ttest\t测试环境\tproduction\trelease\t预发布环境\tproduction\tprod\t生产环境\n备注：\n\nNODE_ENV 只区分开发生产环境，主要用来区分本地环境与部署环境\nRUNTIME_ENV 运行时环境, 主要用于不同环境的逻辑区分\n\n\n:::info 备注：可以在 scripts run 命令中设置 RUNTIME_ENV 环境变量来满足自己的业务需求。:::\n例如：\n\n\nrun 命令\n\n\n{\n\"scripts\":{\n\"run\": \"cross-env PORT=3000 NODE_ENV=production RUNTIME_ENV=test yunfly\",\n}\n}"}},"/document/simple-use/gradually-build":{"title":"逐步搭建","data":{"":"一步一步逐步搭建","设置-npm-镜像源#设置 npm 镜像源":"// npm\nnpm config set registry https://registry.npmmirror.com\n// yarn\nyarn config set registry https://registry.npmmirror.com","初始化项目#初始化项目":"","初始化下目录结构#初始化下目录结构":"mkdir yunfly-example\ncd yunfly-example\nyarn init\nyarn add yunfly\nyarn add cross-env typescript tsconfig-paths gts --dev","配置脚本命令#配置脚本命令":"package.json 中添加 npm scripts 脚本\n\n\n{\n\"scripts\": {\n\"dev\": \"cross-env NODE_ENV=dev PORT=3000 yunfly\",\n\"watch:dev\": \"cross-env NODE_ENV=dev PORT=3000 yunfly --watch\",\n\"run\": \"cross-env PORT=3000 NODE_ENV=production RUNTIME_ENV=prod yunfly\",\n\"build\": \"yarn clean && yarn compile\",\n\"clean\": \"gts clean\",\n\"compile\": \"tsc -p .\"\n}\n}","配置-tsconfigjson#配置 tsconfig.json":"{\n\"extends\": \"./node_modules/gts/tsconfig-google.json\",\n\"compilerOptions\": {\n\"rootDir\": \"src\",\n\"outDir\": \"./build/\",\n\"experimentalDecorators\": true,\n\"emitDecoratorMetadata\": true,\n\"noEmitOnError\": false,\n\"noUnusedLocals\": true,\n\"noUnusedParameters\": false,\n\"moduleResolution\": \"node\",\n\"strictPropertyInitialization\": false,\n\"module\": \"commonjs\",\n\"target\": \"es2017\",\n\"sourceMap\": false\n},\n\"include\": [\n\"src/**/*.ts\"\n],\n\"exclude\": [\n\"node_modules\"\n]\n}","编写-controller#编写 Controller":"import { Get, JsonController, BodyParam, Post, QueryParam } from 'yunfly';\n/**\n* 测试案例controller\n*\n* @export\n* @class TestController\n*/\n@JsonController('/example')\nexport default class ExampleController {\n/**\n* 简单案例 - get\n*\n* @param {string} name 姓名\n* @return {*}  {string}\n* @memberof ExampleController\n*/\n@Get('/simple/get')\nsimple(\n@QueryParam('name') name: string,\n): string {\nreturn name || 'success';\n}\n/**\n* 简单案例 -post\n*\n* @param {string} name 姓名\n* @return {*}  {string}\n* @memberof ExampleController\n*/\n@Post('/simple/post')\nsimple1(\n@BodyParam('name') name: string,\n): string {\nreturn name || 'success';\n}\n}","配置-config#配置 Config":"/**\n* This is an env aggregation default config.\n* (note) this is a minimum config.\n*/\nimport * as path from 'path';\nimport { Config } from 'yunfly';\n\nconst config = () => {\nconst config: Config = {};\n\n/*\n* routing-controllers configs\n* 1. controllers、middlewares、authorizationChecker 需要使用`path.join`进行文件位置的绝对定位\n* 2. 如果 middlewares 、authorizationChecker中有rpc请求，则需要使用函数包裹。\n*/\nconfig.routingControllersOptions = {\ndefaultErrorHandler: false,\ncontrollers: [path.join(__dirname, '../controller/*')],\nmiddlewares: [path.join(__dirname, '../middleware/*')],\n// middlewares: [\n//   require(path.join(__dirname,'../middleware/xxxMiddleware')).default,\n// ]\ndefaults: {\nnullResultCode: 200,  // 204 | 404\nundefinedResultCode: 200 // 204 | 404\n}\n};\n\nreturn config;\n};\n\nexport default config;\n\n此时目录结构如下：\n\n\nyunfly-example\n├── src\n│   ├── config\n│   │   └── config.default.ts\n│   └── controller\n│       └── ExampleController.ts\n├── package.json\n├── tsconfig.json\n└── yarn.locak","运行项目#运行项目":"// 运行\nyarn dev\n// 监听模式运行\nyarn watch:dev\n\n// open: http://127.0.0.1:3000/example/simple/get?name=xiaoming"}},"/document/simple-use/quickly-start":{"title":"快速开始","data":{"":"通过框架模版快速初始化项目","设置-npm-镜像源#设置 npm 镜像源":"// npm\nnpm config set registry https://registry.npmmirror.com\n// yarn\nyarn config set registry https://registry.npmmirror.com","通过模版快速初始化#通过模版快速初始化":"通过模版快速初始化\n\n\n// 拉取模版\ngit@github.com:yunke-yunfly/YUNFLY-TEMPLATE.git\n\n// 安装依赖\nyarn install\n\n// 启动项目\nyarn dev\nyarn watch:dev\n\n// open\nhttp://127.0.0.1:3000/example/simple/get?name=xxx","生产环境#生产环境":"// 编译\nyarn build\n\n// 运行\nyarn run run"}},"/faq":{"title":"构建报错","data":{"":"","core-jsxxxjs-模块找不到#core-js/xxx/.js 模块找不到":"原因是: 1、core-js没有安装；2、core-js版本低了解决方法: 如果是core-js未安装，则安装即可；如果是core-js版本低了，则升级到最新版本"}},"/":{"title":"Yunfly","data":{"":"https://yunke-yunfly.github.io/doc.github.io"}}}