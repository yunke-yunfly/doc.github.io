[{"title":"特性","type":0,"sectionRef":"#","url":"/doc.github.io/docs/introduction/characteristic","content":"特性 基于 Koa 开发, 底层框架性能优异。基于 Typescript 进行项目开发，更安全，更高效。基于 routing-controllers 进行路由的定义，完善的注解API，开发效率更高提供基于 Yunfly 强大的插件能力高度扩展的框架开发机制内置多进程能力渐进式开发","keywords":""},{"title":"与社区框架差异","type":0,"sectionRef":"#","url":"/doc.github.io/docs/introduction/framework-differences","content":"与社区框架差异 能力\tyunfly\teggjs\tnestjsTypescript\t✅\t❌[支持但不友好]\t✅ cluster\t✅\t✅\t❌ openapi\t✅\t❌\t✅ 框架约束\t部分约束\t约束\t自由 扩展模型\t插件\t插件\t模块","keywords":""},{"title":"性能","type":0,"sectionRef":"#","url":"/doc.github.io/docs/introduction/performance","content":"","keywords":""},{"title":"容器环境​","type":1,"pageTitle":"性能","url":"/doc.github.io/docs/introduction/performance#容器环境","content":"1G1核 Docker 容器 "},{"title":"hello world 场景​","type":1,"pageTitle":"性能","url":"/doc.github.io/docs/introduction/performance#hello-world-场景","content":"web框架\tqps\t备注yunfly\t6400\t使用 koa 为底层库 eggjs\t3950\t使用 koa 为底层库 nestjs\t2900\t使用 express 为底层库 nestjs\t7200\t使用 fastify 为底层库 "},{"title":"1000 个路由场景​","type":1,"pageTitle":"性能","url":"/doc.github.io/docs/introduction/performance#1000-个路由场景","content":"web框架\tqps\t备注yunfly\t6100\t使用 koa 为底层库 eggjs\t1680\t使用 koa 为底层库 nestjs\t2050\t使用 express为底层库 nestjs\t6550\t使用 fastify为底层库 "},{"title":"介绍","type":0,"sectionRef":"#","url":"/doc.github.io/docs/introduction/introduce","content":"","keywords":""},{"title":"框架技术栈​","type":1,"pageTitle":"介绍","url":"/doc.github.io/docs/introduction/introduce#框架技术栈","content":"Koa2 node.js http 框架, async await异步编程 参考文档find-my-way 一款高性能的 http 路由器 参考文档typescript 微软开发的自由和开源的编程语言, 它是JavaScript的一个超集, 添加了可选的静态类型和基于类的面向对象编程 参考文档routing-controllers 使用装饰器的方式来进行路由的开发 参考文档typedi: 依赖注入插件工具 参考文档grpc: 一个高性能、开源和通用的 RPC 框架 参考文档log4js: javascript 的 log 日志插件 参考文档 "},{"title":"环境准备","type":0,"sectionRef":"#","url":"/doc.github.io/docs/simple-use/env","content":"","keywords":""},{"title":"Node.js 版本​","type":1,"pageTitle":"环境准备","url":"/doc.github.io/docs/simple-use/env#nodejs-版本","content":"Node.js &gt;= 12.17.0, 推荐使用 node@14+ "},{"title":"环境变量​","type":1,"pageTitle":"环境准备","url":"/doc.github.io/docs/simple-use/env#环境变量","content":"NODE_ENV\tRUNTIME_ENV\t说明dev\tlocal\t本地开发环境 production\ttest\t测试环境 production\trelease\t预发布环境 production\tprod\t生产环境 备注： NODE_ENV 只区分开发生产环境，主要用来区分本地环境与部署环境RUNTIME_ENV 运行时环境, 主要用于不同环境的逻辑区分 备注： 可以在 scripts run 命令中设置 RUNTIME_ENV 环境变量来满足自己的业务需求。 例如： run 命令 package.json { &quot;scripts&quot;:{ &quot;run&quot;: &quot;cross-env PORT=3000 NODE_ENV=production RUNTIME_ENV=test yunfly&quot;, } }  "},{"title":"快速开始","type":0,"sectionRef":"#","url":"/doc.github.io/docs/simple-use/quickly-start","content":"","keywords":""},{"title":"设置 npm 镜像源​","type":1,"pageTitle":"快速开始","url":"/doc.github.io/docs/simple-use/quickly-start#设置-npm-镜像源","content":"// npm npm config set registry https://registry.npmmirror.com // yarn yarn config set registry https://registry.npmmirror.com  "},{"title":"通过模版快速初始化​","type":1,"pageTitle":"快速开始","url":"/doc.github.io/docs/simple-use/quickly-start#通过模版快速初始化","content":"通过模版快速初始化 // 拉取模版 git@github.com:yunke-yunfly/YUNFLY-TEMPLATE.git // 安装依赖 yarn install // 启动项目 yarn dev yarn watch:dev // open http://127.0.0.1:3000/example/simple/get?name=xxx  "},{"title":"生产环境​","type":1,"pageTitle":"快速开始","url":"/doc.github.io/docs/simple-use/quickly-start#生产环境","content":"// 编译 yarn build // 运行 yarn run run  "},{"title":"逐步搭建","type":0,"sectionRef":"#","url":"/doc.github.io/docs/simple-use/gradually-build","content":"","keywords":""},{"title":"设置 npm 镜像源​","type":1,"pageTitle":"逐步搭建","url":"/doc.github.io/docs/simple-use/gradually-build#设置-npm-镜像源","content":"// npm npm config set registry https://registry.npmmirror.com // yarn yarn config set registry https://registry.npmmirror.com  "},{"title":"初始化项目​","type":1,"pageTitle":"逐步搭建","url":"/doc.github.io/docs/simple-use/gradually-build#初始化项目","content":""},{"title":"初始化下目录结构​","type":1,"pageTitle":"逐步搭建","url":"/doc.github.io/docs/simple-use/gradually-build#初始化下目录结构","content":"mkdir yunfly-example cd yunfly-example yarn init yarn add yunfly yarn add cross-env typescript tsconfig-paths gts --dev  "},{"title":"配置脚本命令​","type":1,"pageTitle":"逐步搭建","url":"/doc.github.io/docs/simple-use/gradually-build#配置脚本命令","content":"package.json 中添加 npm scripts 脚本 package.json { &quot;scripts&quot;: { &quot;dev&quot;: &quot;cross-env NODE_ENV=dev PORT=3000 yunfly&quot;, &quot;watch:dev&quot;: &quot;cross-env NODE_ENV=dev PORT=3000 yunfly --watch&quot;, &quot;run&quot;: &quot;cross-env PORT=3000 NODE_ENV=production RUNTIME_ENV=prod yunfly&quot;, &quot;build&quot;: &quot;yarn clean &amp;&amp; yarn compile&quot;, &quot;clean&quot;: &quot;gts clean&quot;, &quot;compile&quot;: &quot;tsc -p .&quot; } }  "},{"title":"配置 tsconfig.json​","type":1,"pageTitle":"逐步搭建","url":"/doc.github.io/docs/simple-use/gradually-build#配置-tsconfigjson","content":"tsconfig.json { &quot;extends&quot;: &quot;./node_modules/gts/tsconfig-google.json&quot;, &quot;compilerOptions&quot;: { &quot;rootDir&quot;: &quot;src&quot;, &quot;outDir&quot;: &quot;./build/&quot;, &quot;experimentalDecorators&quot;: true, &quot;emitDecoratorMetadata&quot;: true, &quot;noEmitOnError&quot;: false, &quot;noUnusedLocals&quot;: true, &quot;noUnusedParameters&quot;: false, &quot;moduleResolution&quot;: &quot;node&quot;, &quot;strictPropertyInitialization&quot;: false, &quot;module&quot;: &quot;commonjs&quot;, &quot;target&quot;: &quot;es2017&quot;, &quot;sourceMap&quot;: false }, &quot;include&quot;: [ &quot;src/**/*.ts&quot; ], &quot;exclude&quot;: [ &quot;node_modules&quot; ] }  "},{"title":"编写 Controller​","type":1,"pageTitle":"逐步搭建","url":"/doc.github.io/docs/simple-use/gradually-build#编写-controller","content":"src/controller/ExampleController.ts import { Get, JsonController, BodyParam, Post, QueryParam } from 'yunfly'; /** * 测试案例controller * * @export * @class TestController */ @JsonController('/example') export default class ExampleController { /** * 简单案例 - get * * @param {string} name 姓名 * @return {*} {string} * @memberof ExampleController */ @Get('/simple/get') simple( @QueryParam('name') name: string, ): string { return name || 'success'; } /** * 简单案例 -post * * @param {string} name 姓名 * @return {*} {string} * @memberof ExampleController */ @Post('/simple/post') simple1( @BodyParam('name') name: string, ): string { return name || 'success'; } }  "},{"title":"配置 Config​","type":1,"pageTitle":"逐步搭建","url":"/doc.github.io/docs/simple-use/gradually-build#配置-config","content":"src/config/config.default.ts /** * This is an env aggregation default config. * (note) this is a minimum config. */ import * as path from 'path'; import { Config } from 'yunfly'; const config = () =&gt; { const config: Config = {}; /* * routing-controllers configs * 1. controllers、middlewares、authorizationChecker 需要使用`path.join`进行文件位置的绝对定位 * 2. 如果 middlewares 、authorizationChecker中有rpc请求，则需要使用函数包裹。 */ config.routingControllersOptions = { defaultErrorHandler: false, controllers: [path.join(__dirname, '../controller/*')], middlewares: [path.join(__dirname, '../middleware/*')], // middlewares: [ // require(path.join(__dirname,'../middleware/xxxMiddleware')).default, // ] defaults: { nullResultCode: 200, // 204 | 404 undefinedResultCode: 200 // 204 | 404 } }; return config; }; export default config;  此时目录结构如下： yunfly-example ├── src │ ├── config │ │ └── config.default.ts │ └── controller │ └── ExampleController.ts ├── package.json ├── tsconfig.json └── yarn.locak  "},{"title":"运行项目​","type":1,"pageTitle":"逐步搭建","url":"/doc.github.io/docs/simple-use/gradually-build#运行项目","content":"// 运行 yarn dev // 监听模式运行 yarn watch:dev // open: http://127.0.0.1:3000/example/simple/get?name=xiaoming  "}]